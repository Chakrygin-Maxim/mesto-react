{"ast":null,"code":"import { url } from \"./utils\";\n\nclass Api {\n  constructor() {\n    this._url = url;\n  }\n\n  _handleResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    return res.json();\n  }\n\n  _handleGetToken() {\n    return localStorage.getItem(\"jwt\");\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        authorization: this._token,\n        \"content-type\": \"application/json\"\n      }\n    }).then(this._handleResponse);\n  }\n\n  updateUserInfo(name, about, jwt) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: jwt,\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._handleResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        authorization: this._token,\n        \"content-type\": \"application/json\"\n      }\n    }).then(this._handleResponse);\n  }\n\n  addCard(name, link) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: {\n        authorization: this._token,\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._handleResponse);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._token,\n        \"content-type\": \"application/json\"\n      }\n    }).then(this._handleResponse);\n  }\n\n  updateAvatar(avatar) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._token,\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._handleResponse);\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: {\n        authorization: this._token,\n        \"content-type\": \"application/json\"\n      }\n    }).then(this._handleResponse);\n  }\n\n}\n\nconst api = new Api(url);\nexport default api;","map":{"version":3,"sources":["C:/Users/chakrygin/dev/mesto-react/src/utils/api.js"],"names":["url","Api","constructor","_url","_handleResponse","res","ok","Promise","reject","status","json","_handleGetToken","localStorage","getItem","getUserInfo","fetch","headers","authorization","_token","then","updateUserInfo","name","about","jwt","method","body","JSON","stringify","getInitialCards","addCard","link","deleteCard","cardId","updateAvatar","avatar","changeLikeCardStatus","isLiked","api"],"mappings":"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","sourcesContent":["import { url } from \"./utils\";\r\n\r\nclass Api {\r\n  constructor() {\r\n    this._url = url;\r\n  }\r\n\r\n  _handleResponse(res) {\r\n    if (!res.ok) {\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n    return res.json();\r\n  }\r\n\r\n  _handleGetToken() {\r\n    return localStorage.getItem(\"jwt\");\r\n  }\r\n\r\n  getUserInfo() {\r\n    return fetch(`${this._url}/users/me`, {\r\n      headers: {\r\n        authorization: this._token,\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  updateUserInfo(name, about, jwt) {\r\n    return fetch(`${this._url}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        authorization: jwt,\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ name, about }),\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  getInitialCards() {\r\n    return fetch(`${this._url}/cards`, {\r\n      headers: {\r\n        authorization: this._token,\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  addCard(name, link) {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        authorization: this._token,\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ name, link }),\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  deleteCard(cardId) {\r\n    return fetch(`${this._url}/cards/${cardId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        authorization: this._token,\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  updateAvatar(avatar) {\r\n    return fetch(`${this._url}/users/me/avatar`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        authorization: this._token,\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ avatar }),\r\n    }).then(this._handleResponse);\r\n  }\r\n\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n    return fetch(`${this._url}/cards/likes/${cardId}`, {\r\n      method: isLiked ? \"PUT\" : \"DELETE\",\r\n      headers: {\r\n        authorization: this._token,\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    }).then(this._handleResponse);\r\n  }\r\n}\r\n\r\nconst api = new Api(url);\r\nexport default api;\r\n"]},"metadata":{},"sourceType":"module"}